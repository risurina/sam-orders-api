AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Order APIs

Globals:
  Function:
    Runtime: nodejs16.x
    Architectures:
      - x86_64
    MemorySize: 256
    Timeout: 90

Parameters:
  AWSENV:
    Type: String
    AllowedValues:
      - dev
      - stage
      - prod
      - local
    Default: local
  StageName:
    Type: String
    Default: dev

Conditions:
  isDev:
    Fn::Equals:
      - Ref: AWSENV
      - dev
  isStaging:
    Fn::Equals:
      - Ref: AWSENV
      - stage
  isProd:
    Fn::Equals:
      - Ref: AWSENV
      - prod

Resources:
  OrdersApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: orders-api-${AWSENV}
      Description: Orders API Gateway
      EndpointConfiguration:
        Type: REGIONAL
      TracingEnabled: true
      StageName:
        Ref: StageName
      ApiKeySourceType: HEADER
      Auth:
        AddDefaultAuthorizerToCorsPreflight: False # CORS: removes Authorizer from the automatically created OPTIONS methods
        ApiKeyRequired: false
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: Usage plan for this API
          Quota:
            Limit: 100000
            Period: MONTH
          Throttle:
            BurstLimit: 100
            RateLimit: 50
      # DefinitionBody:
      #   Fn::Transform:
      #     Name: AWS::Include
      #     Parameters:
      #       Location: orders.openapi.yaml
      GatewayResponses:
        BAD_REQUEST_BODY:
          ResponseTemplates:
            application/json: '{"message":$context.error.messageString, "errors": "$context.error.validationErrorString" }'
      Tags:
        Name: Orders API Gateway
        Description: Orders API Gateway
  #END: Api Gateway

  #BEGIN: IAM Role
  OrdersLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName:
            Fn::Sub: orders-cloudwatch-access-${AWSENV}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/*
        - PolicyName:
            Fn::Sub: orders-dynamodb-access-${AWSENV}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - Fn::GetAtt: OrdersTable.Arn
                  - Fn::GetAtt: JobsTable.Arn
        - PolicyName:
            Fn::Sub: orders-dynamodb-stream-access-${AWSENV}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource:
                  - Fn::GetAtt: JobsTable.StreamArn

  #END: IAM Role

  #BEGIN: DynamoDB tables
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: orders-${AWSENV}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  JobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: jobs-${AWSENV}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  #END: DynamoDB tables

  #BEGIN: Lambda Functions
  CatalogsApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Catalogs API Lambda
      FunctionName:
        Fn::Sub: catalogs-api-${AWSENV}
      Role:
        Fn::GetAtt: OrdersLambdaIAMRole.Arn
      CodeUri: src/handlers
      Handler: catalogs.handlers
      Tracing: Active
      Environment:
        Variables:
          AWSENV:
            Fn::Sub: ${AWSENV}
          LOCAL_DYNAMODB_ENDPOINT: ''
      Events:
        CatalogList:
          Type: Api
          Properties:
            Path: /v1/catalogs
            Method: GET
            RestApiId:
              Ref: OrdersApi
            Stage:
              Ref: StageName
        CatalogGet:
          Type: Api
          Properties:
            Path: /v1/catalogs/{id}
            Method: GET
            RestApiId:
              Ref: OrdersApi
            Stage:
              Ref: StageName
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - catalogs.ts

  OrdersApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Orders API Lambda
      FunctionName:
        Fn::Sub: orders-api-${AWSENV}
      Role:
        Fn::GetAtt: OrdersLambdaIAMRole.Arn
      CodeUri: src/handlers
      Handler: orders.handlers
      Tracing: Active
      Environment:
        Variables:
          AWSENV:
            Fn::Sub: ${AWSENV}
          LOCAL_DYNAMODB_ENDPOINT: ''
      Events:
        OrderCreate:
          Type: Api
          Properties:
            Path: /v1/orders
            Method: POST
            RestApiId:
              Ref: OrdersApi
            Stage:
              Ref: StageName
        OrderGet:
          Type: Api
          Properties:
            Path: /v1/orders/{id}
            Method: GET
            RestApiId:
              Ref: OrdersApi
            Stage:
              Ref: StageName
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - orders.ts

  JobsDynamoStreamFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Description: Jobs Stream Lambda
      FunctionName:
        Fn::Sub: jobs-dynamo-stream-${AWSENV}
      Role:
        Fn::GetAtt: OrdersLambdaIAMRole.Arn
      CodeUri: src/handlers/streams
      Handler: jobs.handlers
      Tracing: Active
      MemorySize: 512
      Timeout: 120
      Environment:
        Variables:
          AWSENV:
            Fn::Sub: ${AWSENV}
          LOCAL_POSTGRES_URL: ''
      Events:
        DynamoDBOrdersTable:
          Type: DynamoDB
          Properties:
            Stream:
              Fn::GetAtt: JobsTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 1
            MaximumBatchingWindowInSeconds: 1
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - jobs.ts
  #END: Lambda Function

Outputs:
  OrdersApi:
    Description: URL of the API endpoint
    Value:
      Fn::Sub: https://${OrdersApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/
    Export:
      Name:
        Fn::Sub: orders-api-url-${AWSENV}
  OrdersApiId:
    Description: Api id of OrdersApi
    Value:
      Ref: OrdersApi
    Export:
      Name:
        Fn::Sub: orders-api-id-${AWSENV}
  # OrdersTable:
  #   Description: Arn of DynamoDB table OrdersTable
  #   Value:
  #     Fn::GetAtt: OrdersTable.Arn
  #   Export:
  #     Name:
  #       Fn::Sub: orders-dynamo-table-${AWSENV}
  # OrdersTableStreamArn:
  #   Description: Arn of DynamoDB stream from OrdersTable
  #   Value:
  #     Fn::GetAtt: OrdersTable.StreamArn
  #   Export:
  #     Name:
  #       Fn::Sub: orders-dynamo-stream-${AWSENV}
  # OrdersApiFunctionArn:
  #   Description: Orders Lambda Api Function ARN
  #   Value:
  #     Fn::GetAtt: OrdersApiFunction.Arn
  #   Export:
  #     Name:
  #       Fn::Sub: orders-api-lambda-arn-${AWSENV}
  # OrdersDynamoStreamFunctionArn:
  #   Description: Orders Dynamo Stream Lambda Function ARN
  #   Value:
  #     Fn::GetAtt: OrdersDynamoStreamFunction.Arn
  #   Export:
  #     Name:
  #       Fn::Sub: orders-dynamo-stream-lambda-arn-${AWSENV}